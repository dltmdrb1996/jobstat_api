spring:
  application:
    name: jobstat-auth
  threads:
    virtual:
      enabled: true
  config:
    activate:
      on-profile: test
  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
    show-sql: true
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      database: ${REDIS_DB:1}
  batch:
    jdbc:
      initialize-schema: always
    job:
      enabled: false
    chunk-size: 1000
    job-queue-size: 100
    max-threads: 5
  web:
    resources:
      add-mappings: false
  h2:
    console:
      enabled: false
  cache:
    type: caffeine
  jackson:
    time-zone: Asia/Seoul
    serialization:
      write-dates-as-timestamps: false
  kafka:
    bootstrap-servers: ${KAFKA_SERVERS:localhost:9092}
    consumer:
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      enable-auto-commit: false
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

batch:
  chunk-size: 2000
  small-size: 100
  job-size: 100

logging:
  level:
    root: INFO
    com.wildrew.batch: DEBUG
    org.springframework.jdbc.core: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql: TRACE
    org.testcontainers: INFO


server:
  port: 8082
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/plain
    min-response-size: 2048
  http2:
    enabled: true
  forward-headers-strategy: NATIVE

eureka:
  instance:
    hostname: ${EUREKA_INSTANCE_HOSTNAME_AUTH:localhost}
    prefer-ip-address: false
  client:
    fetch-registry: true
    register-with-eureka: true
    serviceUrl:
      defaultZone: ${EUREKA_DEFAULT_ZONE_AUTH:http://localhost:8761/eureka/}

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,env,configprops
  endpoint:
    health:
      show-details: always
    prometheus:
      access: read_only
  prometheus:
    metrics:
      export:
        enabled: true

jobstat:
  core:
    security:
      admin:
        username: ${ADMIN_USERNAME}
        password: ${ADMIN_PASSWORD}
    token:
      jwt:
        secret: ${JWT_SECRET}
        access-token-expiration-seconds: ${JWT_ACCESS_TOKEN_EXPIRATION:900}
        refresh-token-expiration-seconds: ${JWT_REFRESH_TOKEN_EXPIRATION:604800}
        tokenPrefix: "Bearer "
    openapi:
      title: "JobStat Auth API"
      version: "v1.0-auth"
      description: "JobStat Authentication Service API Documentation"
      server:
        urls: "http://localhost:${server.port:8081}"
        description: "Current Development Server (Auth Service)"
      security:
        bearer-auth:
          enabled: true
      custom-model-converter:
        enabled: true
    error:
      global-handler:
        enabled: true # 전역 에러 핸들러 사용


outbox:
  relay:
    kafka-send-timeout-seconds: 3
    scheduler:
      fixed-delay-seconds: 10
      initial-delay-seconds: 5
      cutoff-seconds: 10
      batch-size: 100
    max-retry-count: 3
  processor: # 이벤트 처리기 설정 (auth-service가 직접 처리하는 이벤트가 있다면)
    kafka-send-timeout-seconds: 5
    max-retry-count: 3

# DLT (Dead Letter Topic) 소비자 설정 (auth-service가 DLT를 소비한다면)
# dlt:
#   consumer:
#     group-id: auth-dlt-persistence-group-${spring.profiles.active:dev}

springdoc: # OpenAPI 상세 설정
  api-docs:
    enabled: true # 기본적으로 API 문서 생성 활성화
    path: /v3/api-docs
  swagger-ui:
    enabled: true # 기본적으로 Swagger UI 활성화
    path: /swagger-ui.html
  default-models-expand-depth: 1
  default-produces-media-type: application/json