server:
  port: ${GATEWAY_PORT:8000}

spring:
  application:
    name: jobstat-api-gateway
  threads:
    virtual:
      enabled: true
  cloud:
    gateway:
      default-filters:
        - AuthenticationFilter
      discovery:
        locator:
          enabled: true # Eureka에 등록된 서비스 ID를 기반으로 자동으로 라우팅 규칙 생성 (예: /jobstat/** -> jobstat 서비스)
          lower-case-service-id: true # 서비스 ID를 소문자로 변환하여 경로 생성
      # 기본 라우팅 설정 (locator로 충분할 수도 있고, 명시적 라우트가 더 필요할 수도 있음)
      # routes:
      #   - id: jobstat_route # 라우트 ID
      #     uri: lb://JOBSTAT # Eureka에 등록된 서비스 ID (대소문자 구분 주의)
      #     predicates:
      #       - Path=/api/jobstat/** # 이 경로로 오는 요청을 매칭
      #     filters:
      #       - RewritePath=/api/jobstat/(?<segment>.*), /$\{segment} # 경로 재작성 (선택적)
      #       - AuthenticationFilter # 아래에서 만들 커스텀 인증 필터

# Eureka 클라이언트 설정 (jobstat.yml 등 다른 서비스와 유사하게)
eureka:
  instance:
    hostname: ${EUREKA_INSTANCE_HOSTNAME_GATEWAY:localhost} # dev 기본 localhost
    prefer-ip-address: ${EUREKA_INSTANCE_PREFER_IP_ADDRESS_GATEWAY:false} # dev 기본 false
  client:
    serviceUrl:
      defaultZone: ${EUREKA_DEFAULT_ZONE_GATEWAY:http://localhost:8761/eureka/} # dev 기본 로컬 Eureka

# JWT 검증을 위한 설정 (core_token 모듈의 JwtTokenParser가 사용)
jobstat:
  core:
    token:
      jwt:
        secret: ${JWT_SECRET}

# 로깅 레벨 (Gateway 디버깅 시 유용)
logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    reactor.netty.http.client: DEBUG # HTTP 클라이언트 상세 로깅
    com.wildrew.apigateway: DEBUG # Gateway 자체 코드 로깅