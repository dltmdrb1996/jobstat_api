server:
  port: 8084
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/plain
    min-response-size: 2048
  http2:
    enabled: true
  forward-headers-strategy: NATIVE

spring:
  application:
    name: jobstat-community-read
  threads:
    virtual:
      enabled: true
  web:
    resources:
      add-mappings: false
  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
    open-in-view: false
    properties:
      hibernate:
        jdbc:
          time_zone: Asia/Seoul
  cache:
    type: caffeine
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      database: ${REDIS_DB:1}
      password: ${REDIS_PASSWORD}
      username: default
      lettuce:
        pool:
          max-active: 8
  jackson:
    time-zone: Asia/Seoul
    serialization:
      write-dates-as-timestamps: false
  kafka:
    bootstrap-servers: ${KAFKA_SERVERS:localhost:9092}
    consumer:
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      enable-auto-commit: false
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

eureka:
  instance:
    hostname: ${EUREKA_INSTANCE_HOSTNAME_COMMUNITY_READ:localhost}
    prefer-ip-address: false
  client:
    fetch-registry: true
    register-with-eureka: true
    serviceUrl:
      defaultZone: ${EUREKA_DEFAULT_ZONE_COMMUNITY_READ:http://localhost:8761/eureka/}

logging:
  level:
    root: WARN
    com.wildrew: INFO
    org.springframework: WARN
    org.hibernate: WARN
    org.springframework.kafka: WARN

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,env,configprops,loggers,metrics
  endpoint:
    health:
      show-details: always
    prometheus:
      access: read_only
  prometheus:
    metrics:
      export:
        enabled: true

shedlock:
  provider:
    redis:
      key-prefix: "community-read-shedlock:"

jobstat:
  core:
    security:
      admin:
        username: ${ADMIN_USERNAME}
        password: ${ADMIN_PASSWORD}
    openapi:
      title: "JobStat Community Read API"
      version: "v1.0-community-read"
      description: "JobStat Community Rea Service API Documentation"
      server:
        urls: "http://localhost:${server.port}"
        description: "Community Service"
      security:
        bearer-auth:
          enabled: false
      custom-model-converter:
        enabled: true
    error:
      global-handler:
        enabled: true
    event:
      dlt:
        consumer:
          enabled: true
          topic-pattern: "${kafka.consumer.community-read.topic:community-read-unknown}${kafka.consumer.common.dlt-suffix:.DLT}"
          group-id: "${spring.application.name}-dlt-consumer-group-${spring.profiles.active:dev}"

community-read:
  redis:
    event-ts:
      ttl-days: 1
  endpoints:
    community-service:
      url: http://localhost:8083

springdoc:
  api-docs:
    enabled: false
    path: /v3/api-docs
  swagger-ui:
    enabled: false
    path: /swagger-ui.html
  default-models-expand-depth: 1
  default-produces-media-type: application/json
