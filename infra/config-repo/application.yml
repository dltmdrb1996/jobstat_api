server:
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/plain
    min-response-size: 2048
  http2:
    enabled: true
  forward-headers-strategy: NATIVE

eureka:
  instance:
    hostname: ${EUREKA_INSTANCE_HOSTNAME:localhost}
#    prefer-ip-address: ${EUREKA_INSTANCE_PREFER_IP_ADDRESS:false}
    prefer-ip-address: false
  client:
    fetch-registry: true
    register-with-eureka: true
    serviceUrl:
      defaultZone: ${EUREKA_DEFAULT_ZONE:http://localhost:8761/eureka/}

spring:
  application:
  web:
    resources:
      add-mappings: false
  jpa:
    open-in-view: false
    properties:
      hibernate:
        jdbc:
          time_zone: Asia/Seoul
  h2:
    console:
      enabled: false
  cache:
    type: caffeine
  jackson:
    time-zone: Asia/Seoul
    serialization:
      write-dates-as-timestamps: false
  kafka:
    bootstrap-servers: ${KAFKA_SERVERS:localhost:9092}
    consumer:
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      enable-auto-commit: false
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,env,configprops
  endpoint:
    health:
      show-details: always
  prometheus:
    metrics:
      export:
        enabled: true

logging:
  level:
    root: WARN
    com.wildrew: INFO
    org.springframework: WARN
    org.hibernate: WARN

springdoc:
  api-docs:
    enabled: false
    path: /v3/api-docs
  swagger-ui:
    enabled: false
    path: /swagger-ui.html
  default-models-expand-depth: 1
  default-produces-media-type: application/json

kafka:
  consumer:
    community-read:
      topic: community-read-${spring.profiles.active:dev}
      group-id: community-read-consumer-group-${spring.profiles.active:dev}-${spring.application.name}
      retry:
        attempts: 3
        delay-ms: 1000
        multiplier: 2.0
    community-command:
      topic: community-command-${spring.profiles.active:dev}
      group-id: community-command-consumer-group-${spring.profiles.active:dev}-${spring.application.name}
      retry:
        attempts: 3
        delay-ms: 1000
        multiplier: 2.0
    notification:
      topic: notification-${spring.profiles.active:dev}
      group-id: notification-consumer-group-${spring.profiles.active:dev}-${spring.application.name}
      retry:
        attempts: 3
        delay-ms: 1000
        multiplier: 2.0
    community-command-for-read-model:
      topic: community-command-${spring.profiles.active:dev}
      group-id: community-command-read-model-updater-group-${spring.profiles.active:dev}-${spring.application.name}
      retry:
        attempts: 3
        delay-ms: 1000
        multiplier: 2.0
    common:
      dlt-suffix: .DLT
      auto-create-dlt: true

ddns.domain: ${DDNS_DOMAIN}
SENTRY_AUTH_TOKEN: ${SENTRY_AUTH_TOKEN}

outbox:
  relay: # 아웃박스 메시지 Kafka 전송 스케줄러
    kafka-send-timeout-seconds: 3
    scheduler:
      fixed-delay-seconds: 10
      initial-delay-seconds: 5
      cutoff-seconds: 10 # 이 시간 이전의 미전송 메시지만 처리
      batch-size: 100
    max-retry-count: 3
  processor: # 이벤트 발행 후 아웃박스 저장 로직 관련 (core_event에서 사용)
    kafka-send-timeout-seconds: 5 # 사용 안 함 (relay에서 전송)
    max-retry-count:

jobstat:
  event:
    kafka:
      producer:
        transactional-id: "${spring.application.name}-kafka-producer-${spring.profiles.active:dev}"
  core:
    token:
      jwt:
        secret: ${JWT_SECRET}
        access-token-expiration-seconds: ${JWT_ACCESS_TOKEN_EXPIRATION:999999}
        refresh-token-expiration-seconds: ${JWT_REFRESH_TOKEN_EXPIRATION:9604800}
        tokenPrefix: "Bearer "