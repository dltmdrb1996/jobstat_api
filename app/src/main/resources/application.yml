ddns.domain: ${DDNS_DOMAIN}

server:
#  tomcat:
#    threads:
#      max: 150
#    max-connections: 10000
#    accept-count: 300
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/plain
    min-response-size: 2048
  http2:
    enabled: true
  port: ${SERVER_PORT:8081}
  forward-headers-strategy: NATIVE

spring:
  application:
    name: jobstat
  threads:
    virtual:
      enabled: true
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${GMAIL_ID}
    password: ${GMAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  web:
    resources:
      add-mappings: false
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
        jdbc:
          time_zone: Asia/Seoul
    database-platform: org.hibernate.dialect.MySQL8Dialect
  h2:
    console:
      enabled: false
  cache:
    type: caffeine
  kafka:
    bootstrap-servers: ${KAFKA_SERVERS:localhost:9092}
    consumer:
      group-id: default-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      enable-auto-commit: false
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
  jackson:
    time-zone: Asia/Seoul
    serialization:
      write-dates-as-timestamps: false
  datasource:
    url: ${JDBC_URL:jdbc:mysql://localhost:3306/jobstat?serverTimezone=Asia/Seoul}
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 3000

logging:
  debug: true
  level:
    root: WARN
    com.wildrew: WARN
    org:
      springframework:
        security: WARN
      hibernate:
        SQL: ERROR
        type:
          descriptor:
            sql:
              BasicBinder: ERROR
    org.springframework.boot.autoconfigure: DEBUG
    org.springframework.data.mongodb.core.MongoTemplate: WARN

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  endpoint:
    health:
      show-details: always
    prometheus:
      access: read_only
  prometheus:
    metrics:
      export:
        enabled: true

springdoc:
  api-docs:
    enabled: true   # 기본적으로 API 문서 생성을 활성화 (개발/로컬 환경 고려)
    path: /v3/api-docs # API 문서 경로 (기본값)
  swagger-ui:
    enabled: true   # 기본적으로 Swagger UI를 활성화
    path: /swagger-ui.html # Swagger UI 경로 (기본값)
    default-models-expand-depth: 1 # 기타 springdoc 설정들
  default-produces-media-type: application/json

SENTRY_AUTH_TOKEN: ${SENTRY_AUTH_TOKEN}

monitoring:
  cpu:
    threshold: 80.0
    check-interval: 30000
    debug-duration: 1800000 # 30분

jobstat:
  core:
    security:
      admin:
        username: ${ADMIN_USERNAME}
        password: ${ADMIN_PASSWORD}
    token:
      jwt:
        secret: ${JWT_SECRET}
        access-token-expiration-seconds: ${JWT_ACCESS_TOKEN_EXPIRATION:999999}
        refresh-token-expiration-seconds: ${JWT_REFRESH_TOKEN_EXPIRATION:9604800}
        tokenPrefix: "Bearer "
    openapi:
      title: "JobStat API (Default)"
      version: "v1.0-default"
      description: "JobStat API Documentation"
      server:
        urls: "http://localhost:${server.port:8081}" # 현재 서버 포트를 기본값으로 사용
        description: "Current Development Server"
      security:
        bearer-auth:
          enabled: true # JWT 보안 기본 활성화
      custom-model-converter:
        enabled: true # com.wildrew.jobstat.core.core_open_api.CustomModelConverter 기본 활성화
    error:
      global-handler:
        enabled: true


  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:"http://localhost:3000,http://localhost:8080"}
  security:
    public-paths:
      - "/api/auth/**"
      - "/api/token/refresh"
      - "/api/public/**"
  cache:
    ttl: ${CACHE_TTL:600}
  mongodb:
    page-size: ${MONGODB_PAGE_SIZE:20}

admin:
  username: ${ADMIN_USERNAME}
  password: ${ADMIN_PASSWORD}

counter:
  like-reset-hour: 0
  user-action-ttl-seconds: 86400
  flush-interval-seconds: 300
  flush-interval-milliseconds: 10000
  view-count-cache-ttl-seconds: 60
  view-count-sync-interval: 60000

cache:
  board:
    detail:
      ttl-seconds: 3600
    list:
      ttl-seconds: 300
    popular:
      ttl-seconds: 600
    count:
      ttl-seconds: 1800

outbox:
  relay:
    kafka-send-timeout-seconds: 3
    scheduler:
      fixed-delay-seconds: 10
      initial-delay-seconds: 5
      cutoff-seconds: 10
      batch-size: 100
    max-retry-count: 3

  processor:
    kafka-send-timeout-seconds: 5
    max-retry-count: 3

dlt:
  consumer:
    group-id: dlt-persistence-group-${spring.profiles.active:dev}


kafka:
  consumer:
    common:
      dlt-suffix: .DLT
      auto-create-dlt: true
    community-read:
      topic: community-read
      group-id: community-read-consumer-group-${spring.profiles.active:dev}
      retry:
        attempts: 3
        delay-ms: 1000
        multiplier: 2.0
    community-command:
      topic: community-command
      group-id: community-command-consumer-group-${spring.profiles.active:dev}
      retry:
        attempts: 3
        delay-ms: 1000
        multiplier: 2.0