name: CI/CD

on:
  pull_request:
    #    branches: [ develop, main ]
    branches: [ main ]
  push:
    #    branches: [ develop, main ]
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done <<< "${{ secrets.DEV_SECRET }}"

  #      - name: Set up JDK 21
  #        uses: actions/setup-java@v3
  #        with:
  #          java-version: '21'
  #          distribution: 'temurin'
  #          cache: gradle
  #
  #      - name: Grant execute permission for gradlew
  #        run: chmod +x gradlew
  #
  #      - name: Run ktlintCheck
  #        run: ./gradlew ktlintCheck
  #
  #      - name: Run Tests
  #        run: ./gradlew test
  #        env:
  #          SPRING_PROFILES_ACTIVE: test
  #          TESTCONTAINERS_REUSE_ENABLE: true

  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'zulu'  # Zulu JDK 사용
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Set environment variables
        run: |
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done <<< "${{ secrets.DEV_SECRET }}"

      # jar 빌드 단계
      - name: Build with Gradle
        run: ./gradlew bootJar
        env:
          SPRING_PROFILES_ACTIVE: dev

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        env:
          TAG: ${{ github.sha }}
        run: |
               docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/jobstat-app:$TAG .
               docker push ${{ secrets.DOCKERHUB_USERNAME }}/jobstat-app:$TAG
          
               docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/jobstat-nginx:$TAG -f nginx/Dockerfile ./nginx
               docker push ${{ secrets.DOCKERHUB_USERNAME }}/jobstat-nginx:$TAG

  deploy:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done <<< "${{ secrets.DEV_SECRET }}"

      # 1. Get Actions IP
      - name: Get Github Actions IP
        id: ip
        uses: haythem/public-ip@v1.2

      # 2. Configure AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 3. Add IP to security group
      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

      # 4. Copy files and deploy
      - name: Copy configuration files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml,nginx/"
          target: "/home/ubuntu/jobstat"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/jobstat

            # .env 파일 생성
            cat > .env << EOL
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
            TAG=${{ github.sha }}
            DB_USERNAME=${{ env.DB_USERNAME }}
            DB_PASSWORD=${{ env.DB_PASSWORD }}
            MONGO_USERNAME=${{ env.MONGO_USERNAME }}
            MONGO_PASSWORD=${{ env.MONGO_PASSWORD }}
            SENTRY_DSN=${{ env.SENTRY_DSN }}
            SENTRY_AUTH_TOKEN=${{ env.SENTRY_AUTH_TOKEN }}
            JWT_SECRET=${{ env.JWT_SECRET }}
            DB_HOST=${{ env.DB_HOST }}
            MONGO_HOST=${{ env.MONGO_HOST }}
            REDIS_HOST=${{ env.REDIS_HOST }}
            CORS_ALLOWED_ORIGINS=${{ env.CORS_ALLOWED_ORIGINS }}
            EOL

            # 환경 변수 파일 권한 설정
            chmod 600 .env

            docker-compose pull
            docker-compose up -d

            docker system prune -af

      # 5. Remove IP from security group
      - name: Remove Github Actions IP from Security group
        if: always()  # 이전 단계가 실패하더라도 항상 실행
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32