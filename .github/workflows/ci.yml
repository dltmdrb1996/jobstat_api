# 파일 이름: .github/workflows/ci.yml (또는 기존 이름 유지)

name: CI - Build and Test (Optimized)

on:
  pull_request:
    branches: [ "main", "develop", "feature/*", "feat/*" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        # fetch-depth: 0 은 PR의 base 브랜치와 비교하기 위해 전체 git 히스토리를 가져옵니다.
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17 # 원본의 JDK 24 대신 CD와 맞추기 위해 17로 변경 (필요시 24로 유지)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin' # Zulu 대신 Temurin 사용 (일관성)
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Get changed files
        id: changed_files
        uses: tj-actions/changed-files@v44

      - name: Determine tasks to run based on changed files
        id: determine_tasks
        run: |
          # 최종적으로 실행할 Gradle Task를 담을 변수
          TASKS_TO_RUN=""

          # 1. 전역 설정 파일 또는 공용 core 라이브러리 변경 시 전체 테스트 실행
          echo "--- Checking for global or core library changes ---"
          for file in ${{ steps.changed_files.outputs.all_changed_files }}; do
            if [[ "$file" == build.gradle.kts || "$file" == settings.gradle.kts || "$file" == "gradle/"* || "$file" == core/* ]]; then
              echo "Global or core file changed: $file. Running all checks."
              TASKS_TO_RUN="ktlintCheck test build -x test"
              break
            fi
          done

          # 2. 위에서 전체 테스트가 결정되지 않았다면, 변경된 모듈만 선택적으로 검사
          if [ -z "$TASKS_TO_RUN" ]; then
            echo "--- No global changes. Checking for specific module changes ---"
            CHANGED_MODULES=""
            for file in ${{ steps.changed_files.outputs.all_changed_files }}; do
              if [[ "$file" == infra/* || "$file" == service/* ]]; then
                module_path=$(echo "$file" | cut -d/ -f1-2)
                # Gradle Task 경로 형식으로 변환 (예: service/jobstat-auth -> :service:jobstat-auth)
                gradle_module=":${module_path//\//:}"
                # 중복 방지
                if ! echo "$CHANGED_MODULES" | grep -q "$gradle_module"; then
                  CHANGED_MODULES="$CHANGED_MODULES $gradle_module"
                  echo "Module '$gradle_module' was added due to a change in '$file'."
                fi
              fi
            done

            # 변경된 모듈이 있을 경우, 해당 모듈에 대한 Task 목록 생성
            if [ -n "$CHANGED_MODULES" ]; then
              for module in $CHANGED_MODULES; do
                TASKS_TO_RUN="$TASKS_TO_RUN ${module}:ktlintCheck ${module}:test"
              done
              # 마지막으로 변경된 모듈들만 모아서 빌드 (테스트는 제외)
              TASKS_TO_RUN="$TASKS_TO_RUN $(echo "$CHANGED_MODULES" | sed 's/ /:build -x test /g'):build -x test"
            fi
          fi

          if [ -z "$TASKS_TO_RUN" ]; then
            echo "No relevant files changed. Skipping tests and build."
          else
            echo "Tasks to run: $TASKS_TO_RUN"
          fi
          
          echo "tasks_to_run=$TASKS_TO_RUN" >> $GITHUB_OUTPUT

      - name: Run Checks, Tests, and Build for Changed Modules
        # 실행할 Task가 있을 때만 이 단계를 실행
        if: steps.determine_tasks.outputs.tasks_to_run != ''
        run: ./gradlew ${{ steps.determine_tasks.outputs.tasks_to_run }} --no-daemon --build-cache
        # 빌드에 필요한 환경변수들을 모두 여기에 포함
        env:
          SPRING_PROFILES_ACTIVE: test
          TESTCONTAINERS_REUSE_ENABLE: true
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MONGO_HOST: ${{ secrets.MONGO_HOST }}
          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
          MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          DDNS_DOMAIN: ${{ secrets.DDNS_DOMAIN }}
          GMAIL_ID: ${{ secrets.GMAIL_ID }}
          GMAIL_PASSWORD: ${{ secrets.GMAIL_PASSWORD }}
          ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          REDIS_USERNAME: ${{ secrets.REDIS_USERNAME }}