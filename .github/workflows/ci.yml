name: CI/CD

on:
  pull_request:
    #    branches: [ develop, main ]
    branches: [ main ]
  push:
    #    branches: [ develop, main ]
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done <<< "${{ secrets.DEV_SECRET }}"

  #      - name: Set up JDK 21
  #        uses: actions/setup-java@v3
  #        with:
  #          java-version: '21'
  #          distribution: 'temurin'
  #          cache: gradle
  #
  #      - name: Grant execute permission for gradlew
  #        run: chmod +x gradlew
  #
  #      - name: Run ktlintCheck
  #        run: ./gradlew ktlintCheck
  #
  #      - name: Run Tests
  #        run: ./gradlew test
  #        env:
  #          SPRING_PROFILES_ACTIVE: test
  #          TESTCONTAINERS_REUSE_ENABLE: true

  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'zulu'  # Zulu JDK 사용
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Set environment variables
        run: |
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done <<< "${{ secrets.DEV_SECRET }}"

      # jar 빌드 단계
      - name: Build with Gradle
        run: ./gradlew bootJar
        env:
          SPRING_PROFILES_ACTIVE: dev

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        env:
          TAG: ${{ github.sha }}
        run: |
          #           Spring App
               docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/jobstat-app:$TAG .
               docker push ${{ secrets.DOCKERHUB_USERNAME }}/jobstat-app:$TAG
          
          #           Nginx
               docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/jobstat-nginx:$TAG -f nginx/Dockerfile ./nginx
               docker push ${{ secrets.DOCKERHUB_USERNAME }}/jobstat-nginx:$TAG

  deploy:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      # IP 확인 스텝 추가
      - name: Check Runner IP
        run: |
          echo "Runner IP address:"
          curl -s https://api.ipify.org
          echo ""

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 1) 여기서도 DEV_SECRET을 다시 읽어와 GITHUB_ENV에 넣어줘야,
      #    아래 SSH 스크립트에서 env.DB_HOST 처럼 참조 가능
      - name: Set environment variables
        run: |
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done <<< "${{ secrets.DEV_SECRET }}"

      - uses: actions/checkout@v3  # 이 단계 추가
      - name: Copy configuration files to EC2  # 이름 변경
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml,nginx/"  # nginx 디렉토리 추가
          target: "/home/ubuntu/jobstat"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/jobstat
            
            export TAG=${{ github.sha }}
            
            export DB_PASSWORD="${{ env.DB_PASSWORD }}"
            export MONGO_USERNAME="${{ env.MONGO_USERNAME }}"
            export MONGO_PASSWORD="${{ env.MONGO_PASSWORD }}"
            export SENTRY_DSN="${{ env.SENTRY_DSN }}"
            export SENTRY_AUTH_TOKEN="${{ env.SENTRY_AUTH_TOKEN }}"
            export JWT_SECRET="${{ env.JWT_SECRET }}"
            export DB_HOST="${{ env.DB_HOST }}"
            export MONGO_HOST="${{ env.MONGO_HOST }}"
            export REDIS_HOST="${{ env.REDIS_HOST }}"
            export CORS_ALLOWED_ORIGINS="${{ env.CORS_ALLOWED_ORIGINS }}"
            
            docker-compose pull
            docker-compose up -d
            
            docker system prune -af
