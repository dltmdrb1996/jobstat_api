name: Build and Update Manifests

on:
  push:
    branches: [ '**' ]
  workflow_dispatch:
    inputs:
      services_to_deploy:
        description: '배포할 서비스 목록 (all 또는 쉼표로 구분, 예: auth,community-read)'
        required: true
        default: 'all'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.execute_build.outputs.image_tag }}
      modules_json: ${{ steps.execute_build.outputs.modules_json }}
      build_succeeded: ${{ steps.execute_build.outputs.build_succeeded }}

    steps:
      - name: Checkout Application Code
        uses: actions/checkout@v4
        with:
          path: app
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get changed files
        id: changed_files
        if: github.event_name == 'push'
        uses: tj-actions/changed-files@v44
        with:
          path: app

      - name: Determine, Build, and Push
        id: execute_build
        run: |
          cd app

          # --- 1. Determine services to build (이 부분은 수정 없음) ---
          ALL_MODULES="infra/jobstat-eureka-server infra/jobstat-api-gateway infra/jobstat-config-server service/jobstat-auth service/jobstat-community service/jobstat-community_read service/jobstat-notification service/jobstat-statistics_read"
          MODULE_LIST_JSON="[]"
          if [ "${{ github.event_name }}" == "push" ]; then
            build_all_flag=false
            for file in ${{ steps.changed_files.outputs.all_changed_files }}; do
              if [[ "$file" == build.gradle.kts || "$file" == settings.gradle.kts || "$file" == "gradle/"* || "$file" == core/* ]]; then
                build_all_flag=true; break;
              fi
            done
            if [ "$build_all_flag" = true ]; then
              MODULE_LIST_JSON=$(echo "$ALL_MODULES" | jq -R 'split(" ")' | jq -c '.');
            else
              CHANGED_MODULES=""
              for file in ${{ steps.changed_files.outputs.all_changed_files }}; do
                if [[ "$file" == infra/* || "$file" == service/* ]]; then
                  module_path=$(echo "$file" | cut -d/ -f1-2);
                  if [[ "$module_path" != "infra/config-repo" ]]; then
                    if ! echo "$CHANGED_MODULES" | grep -q "$module_path"; then CHANGED_MODULES="$CHANGED_MODULES $module_path"; fi
                  fi
                fi
              done
              if [ -n "$CHANGED_MODULES" ]; then MODULE_LIST_JSON=$(echo "$CHANGED_MODULES" | sed 's/^ *//' | jq -R 'split(" ")' | jq -c '.'); fi
            fi
          else
            INPUT_SERVICES="${{ inputs.services_to_deploy }}"
            if [ "$INPUT_SERVICES" == "all" ]; then MODULE_LIST_JSON=$(echo "$ALL_MODULES" | jq -R 'split(" ")' | jq -c '.');
            else
              MODULE_LIST=""; FORMATTED_SERVICES=$(echo "$INPUT_SERVICES" | tr -d ' ' | sed 's/,/ /g')
              for service in $FORMATTED_SERVICES; do
                MATCH=$(echo "$ALL_MODULES" | grep -oE "([^ ]*jobstat-${service//_/-})");
                if [ -n "$MATCH" ]; then MODULE_LIST="$MODULE_LIST $MATCH"; fi
              done
              if [ -n "$MODULE_LIST" ]; then MODULE_LIST_JSON=$(echo "$MODULE_LIST" | sed 's/^ *//' | jq -R 'split(" ")' | jq -c '.'); fi
            fi
          fi

          # --- 2. Build and Push Images ---
          if [[ "$MODULE_LIST_JSON" == "[]" || "$MODULE_LIST_JSON" == "[\"\"]" ]]; then
            echo "No modules to build. Exiting."
            echo "build_succeeded=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          IMAGE_TAG=${GITHUB_SHA::7}
          MODULES="$MODULE_LIST_JSON"

          GRADLE_COMMANDS=""
          for module in $(echo "${MODULES}" | jq -r '.[]'); do
            gradle_path="${module//\//:}"
            service_name=$(basename "$module" | sed 's/jobstat-//' | sed 's/_/-/g')
            image_name="${{ secrets.DOCKERHUB_USERNAME }}/jobstat-${service_name}:${IMAGE_TAG}"

            # [핵심 수정] --imageName='${image_name}'  ->  --imageName=${image_name}
            # 값에 작은따옴표가 포함되지 않도록 수정합니다.
            GRADLE_COMMANDS="$GRADLE_COMMANDS :${gradle_path}:bootBuildImage --imageName=${image_name}"
          done

          echo "--- Generated Gradle Commands ---"
          echo "./gradlew $GRADLE_COMMANDS -x test --no-daemon --no-parallel" # <-- 옵션 추가
          echo "---------------------------------"

          ./gradlew $GRADLE_COMMANDS -x test --no-daemon --no-parallel # <-- 옵션 추가
          
          echo "build_succeeded=true" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "modules_json=${MODULES}" >> $GITHUB_OUTPUT

  update-manifests:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.build_succeeded == 'true'

    steps:
      - name: Install Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Checkout Manifests Repository
        uses: actions/checkout@v4
        with:
          repository: dltmdrb1996/jobstat-api-manifests
          path: manifests
          token: ${{ secrets.PAT }}

      - name: Update Image Tags in Manifests
        run: |
          cd manifests
          IMAGE_TAG=${{ needs.build.outputs.image_tag }}
          DOCKER_USER=${{ secrets.DOCKERHUB_USERNAME }}
          MODULES='${{ needs.build.outputs.modules_json }}'
          
          for module in $(echo "${MODULES}" | jq -r '.[]'); do
            service_name_base=$(basename "$module" | sed 's/jobstat-//' | sed 's/_/-/g')
            service_name_k8s="jobstat-${service_name_base}"
            echo "Setting image for ${service_name_k8s} to tag ${IMAGE_TAG}"
            kustomize edit set image "${DOCKER_USER}/${service_name_k8s}=${DOCKER_USER}/${service_name_k8s}:${IMAGE_TAG}" overlays/local-k3d
          done

      - name: Commit and Push Manifest Changes
        run: |
          cd manifests
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add overlays/local-k3d/kustomization.yaml
          if ! git diff --staged --quiet; then
            git commit -m "Update image tags for services by ${{ github.actor }} from branch ${{ github.ref_name }}"
            git push
          else
            echo "No image changes to commit."
          fi